/// <reference path="../../../global.d.ts" />
export default class SceneManager {
    _elapsedTime: number;
    _scene: unknown;
    _nextScene: {};
    _previousScene: null;
    _previousClass: unknown;
    _exiting: boolean;
    _stack: [];
    _backgroundBitmap: unknown;
    static _scene: any;
    static _nextScene: any;
    static _stack: any[];
    static _exiting: boolean;
    static _previousScene: any;
    static _previousClass: any;
    static _backgroundBitmap: any;
    static _smoothDeltaTime: number;
    static _elapsedTime: number;
    static checkBrowser: () => void;
    static checkPluginErrors: () => void;
    static initAudio: () => void;
    static initVideo: () => void;
    static initInput: () => void;
    static terminate: () => void;
    static onUnload: () => void;
    static reloadGame: () => void;
    static showDevTools: () => void;
    static catchNormalError: (e: any) => void;
    static catchLoadError: (e: any) => void;
    static catchUnknownError: (e: any) => void;
    static updateFrameCount: () => void;
    static updateInputData: () => void;
    static isGameActive: () => boolean;
    static onSceneCreate: () => void;
    static stop: () => void;
    static resume: () => void;
    constructor();
    static run(sceneClass: any): void;
    static initialize(): void;
    static initGraphics(): void;
    static setupEventHandlers(): void;
    static update(deltaTime: any): void;
    static determineRepeatNumber(deltaTime: any): number;
    static onError(event: any): void;
    static onReject(event: any): void;
    static onKeyDown(event: any): void;
    static catchException(e: any): void;
    static updateMain(): void;
    static updateEffekseer(): void;
    static changeScene(): void;
    static updateScene(): void;
    static onSceneTerminate(): void;
    static onBeforeSceneStart(): void;
    static onSceneStart(): void;
    static isSceneChanging(): boolean;
    static isCurrentSceneBusy(): any;
    static isNextScene(sceneClass: any): boolean;
    static isPreviousScene(sceneClass: any): boolean;
    static goto(sceneClass: any): void;
    static push(sceneClass: any): void;
    static pop(): void;
    static exit(): void;
    static clearStack(): void;
    static prepareNextScene(...args: any[]): void;
    static snap(): import("../..").Bitmap;
    static snapForBackground(): void;
    static backgroundBitmap(): any;
}
