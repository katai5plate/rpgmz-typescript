/// <reference path="../../../global.d.ts" />
export default class BattleManager {
    _canEscape: boolean;
    _canLose: boolean;
    _phase: string;
    _inputting: unknown;
    _battleTest: unknown;
    _eventCallback: unknown;
    _preemptive: boolean;
    _surprise: boolean;
    _currentActor: unknown | null;
    _actionForcedBattler: unknown;
    _mapBgm: unknown;
    _mapBgs: unknown;
    _actionBattlers: unknown;
    _subject: unknown;
    _action: unknown;
    _targets: unknown;
    _logWindow: unknown;
    _spriteset: unknown;
    _escapeRatio: number;
    _escaped: boolean;
    _rewards: {};
    _tpbNeedsPartyCommand: boolean;
    static isTpb: () => boolean;
    static isActiveTpb: () => boolean;
    static ratePreemptive: () => any;
    static rateSurprise: () => any;
    static playBattleBgm: () => void;
    static playVictoryMe: () => void;
    static playDefeatMe: () => void;
    static allBattleMembers: () => any;
    static displayVictoryMessage: () => void;
    static displayDefeatMessage: () => void;
    static displayEscapeSuccessMessage: () => void;
    static displayEscapeFailureMessage: () => void;
    constructor();
    static setup(troopId: any, canEscape: any, canLose: any): void;
    static initMembers(): void;
    static isBattleTest(): any;
    static setBattleTest(battleTest: any): void;
    static setEventCallback(callback: any): void;
    static setLogWindow(logWindow: any): void;
    static setSpriteset(spriteset: any): void;
    static onEncounter(): void;
    static saveBgmAndBgs(): void;
    static replayBgmAndBgs(): void;
    static makeEscapeRatio(): void;
    static update(timeActive: any): void;
    static updatePhase(timeActive: any): void;
    static updateEvent(): boolean;
    static updateEventMain(): boolean;
    static isBusy(): any;
    static updateTpbInput(): void;
    static checkTpbInputClose(): void;
    static checkTpbInputOpen(): void;
    static isPartyTpbInputtable(): boolean;
    static needsActorInputCancel(): boolean;
    static isTpbMainPhase(): boolean;
    static isInputting(): any;
    static isInTurn(): boolean;
    static isTurnEnd(): boolean;
    static isAborting(): boolean;
    static isBattleEnd(): boolean;
    static canEscape(): any;
    static canLose(): any;
    static isEscaped(): any;
    static actor(): any;
    static startBattle(): void;
    static displayStartMessages(): void;
    static startInput(): void;
    static inputtingAction(): any;
    static selectNextCommand(): void;
    static selectNextActor(): void;
    static selectPreviousCommand(): void;
    static selectPreviousActor(): void;
    static changeCurrentActor(forward: any): void;
    static startActorInput(): void;
    static finishActorInput(): void;
    static cancelActorInput(): void;
    static updateStart(): void;
    static startTurn(): void;
    static updateTurn(timeActive: any): void;
    static updateTpb(): void;
    static updateAllTpbBattlers(): void;
    static updateTpbBattler(battler: any): void;
    static checkTpbTurnEnd(): void;
    static processTurn(): void;
    static endBattlerActions(battler: any): void;
    static endTurn(): void;
    static updateTurnEnd(): void;
    static endAllBattlersTurn(): void;
    static displayBattlerStatus(battler: any, current: any): void;
    static getNextSubject(): any;
    static makeActionOrders(): void;
    static startAction(): void;
    static updateAction(): void;
    static endAction(): void;
    static invokeAction(subject: any, target: any): void;
    static invokeNormalAction(subject: any, target: any): void;
    static invokeCounterAttack(subject: any, target: any): void;
    static invokeMagicReflection(subject: any, target: any): void;
    static applySubstitute(target: any): any;
    static checkSubstitute(target: any): boolean;
    static isActionForced(): boolean;
    static forceAction(battler: any): void;
    static processForcedAction(): void;
    static abort(): void;
    static checkBattleEnd(): boolean;
    static checkAbort(): boolean;
    static processVictory(): void;
    static processEscape(): any;
    static onEscapeSuccess(): void;
    static onEscapeFailure(): void;
    static processPartyEscape(): void;
    static processAbort(): void;
    static processDefeat(): void;
    static endBattle(result: any): void;
    static updateBattleEnd(): void;
    static makeRewards(): void;
    static displayRewards(): void;
    static displayExp(): void;
    static displayGold(): void;
    static displayDropItems(): void;
    static gainRewards(): void;
    static gainExp(): void;
    static gainGold(): void;
    static gainDropItems(): void;
}
