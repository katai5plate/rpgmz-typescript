/// <reference path="../../../global.d.ts" />
export default class Window_BattleLog extends Window_Base {
    _lines: [];
    _methods: [];
    _waitCount: unknown;
    _waitMode: unknown;
    _baseLineStack: [];
    _spriteset: unknown;
    constructor(...args: any[]);
    initialize(rect: any): void;
    setSpriteset(spriteset: any): void;
    maxLines(): number;
    numLines(): 0;
    messageSpeed(): number;
    isBusy(): unknown;
    update(): void;
    updateWait(): boolean;
    updateWaitCount(): boolean;
    updateWaitMode(): boolean;
    setWaitMode(waitMode: any): void;
    callNextMethod(): void;
    isFastForward(): boolean;
    push(methodName: any): void;
    clear(): void;
    wait(): void;
    waitForEffect(): void;
    waitForMovement(): void;
    addText(text: any): void;
    pushBaseLine(): void;
    popBaseLine(): void;
    waitForNewLine(): void;
    popupDamage(target: any): void;
    performActionStart(subject: any, action: any): void;
    performAction(subject: any, action: any): void;
    performActionEnd(subject: any): void;
    performDamage(target: any): void;
    performMiss(target: any): void;
    performRecovery(target: any): void;
    performEvasion(target: any): void;
    performMagicEvasion(target: any): void;
    performCounter(target: any): void;
    performReflection(target: any): void;
    performSubstitute(substitute: any, target: any): void;
    performCollapse(target: any): void;
    showAnimation(subject: any, targets: any, animationId: any): void;
    showAttackAnimation(subject: any, targets: any): void;
    showActorAttackAnimation(subject: any, targets: any): void;
    showEnemyAttackAnimation(): void;
    showNormalAnimation(targets: any, animationId: any, mirror: any): void;
    refresh(): void;
    drawBackground(): void;
    backRect(): import("../..").Rectangle;
    lineRect(index: any): import("../..").Rectangle;
    backColor(): string;
    backPaintOpacity(): number;
    drawLineText(index: any): void;
    startTurn(): void;
    startAction(subject: any, action: any, targets: any): void;
    endAction(subject: any): void;
    displayCurrentState(subject: any): void;
    displayRegeneration(subject: any): void;
    displayAction(subject: any, item: any): void;
    displayItemMessage(fmt: any, subject: any, item: any): void;
    displayCounter(target: any): void;
    displayReflection(target: any): void;
    displaySubstitute(substitute: any, target: any): void;
    displayActionResults(subject: any, target: any): void;
    displayFailure(target: any): void;
    displayCritical(target: any): void;
    displayDamage(target: any): void;
    displayMiss(target: any): void;
    displayEvasion(target: any): void;
    displayHpDamage(target: any): void;
    displayMpDamage(target: any): void;
    displayTpDamage(target: any): void;
    displayAffectedStatus(target: any): void;
    displayAutoAffectedStatus(target: any): void;
    displayChangedStates(target: any): void;
    displayAddedStates(target: any): void;
    displayRemovedStates(target: any): void;
    displayChangedBuffs(target: any): void;
    displayBuffs(target: any, buffs: any, fmt: any): void;
    makeHpDamageText(target: any): any;
    makeMpDamageText(target: any): any;
    makeTpDamageText(target: any): any;
}
