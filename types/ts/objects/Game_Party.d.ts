/// <reference path="../../../global.d.ts" />
export default class Game_Party extends Game_Unit {
    _gold: unknown;
    _steps: number;
    _lastItem: typeof Game_Item;
    _menuActorId: unknown;
    _targetActorId: unknown;
    _actors: [];
    _items: {};
    _weapons: {};
    _armors: {};
    static ABILITY_ENCOUNTER_HALF: number;
    static ABILITY_ENCOUNTER_NONE: number;
    static ABILITY_CANCEL_SURPRISE: number;
    static ABILITY_RAISE_PREEMPTIVE: number;
    static ABILITY_GOLD_DOUBLE: number;
    static ABILITY_DROP_ITEM_DOUBLE: number;
    constructor(...args: any[]);
    initialize(): void;
    initAllItems(): void;
    exists(): boolean;
    size(): number;
    isEmpty(): boolean;
    members(): any[];
    allMembers(): any[];
    battleMembers(): any[];
    hiddenBattleMembers(): any[];
    allBattleMembers(): any[];
    maxBattleMembers(): number;
    leader(): any;
    removeInvalidMembers(): void;
    reviveBattleMembers(): void;
    items(): any[];
    weapons(): any[];
    armors(): any[];
    equipItems(): any[];
    allItems(): any[];
    itemContainer(item: any): {};
    setupStartingMembers(): void;
    name(): any;
    setupBattleTest(): void;
    setupBattleTestMembers(): void;
    setupBattleTestItems(): void;
    highestLevel(): number;
    addActor(actorId: any): void;
    removeActor(actorId: any): void;
    gold(): unknown;
    gainGold(amount: any): void;
    loseGold(amount: any): void;
    maxGold(): number;
    steps(): number;
    increaseSteps(): void;
    numItems(item: any): any;
    maxItems(): number;
    hasMaxItems(item: any): boolean;
    hasItem(item: any, includeEquip: any): boolean;
    isAnyMemberEquipped(item: any): boolean;
    gainItem(item: any, amount: any, includeEquip: any): void;
    discardMembersEquip(item: any, amount: any): void;
    loseItem(item: any, amount: any, includeEquip: any): void;
    consumeItem(item: any): void;
    canUse(item: any): boolean;
    canInput(): boolean;
    isAllDead(): boolean;
    isEscaped(): boolean;
    onPlayerWalk(): void;
    menuActor(): any;
    setMenuActor(actor: any): void;
    makeMenuActorNext(): void;
    makeMenuActorPrevious(): void;
    targetActor(): any;
    setTargetActor(actor: any): void;
    lastItem(): any;
    setLastItem(item: any): void;
    swapOrder(index1: any, index2: any): void;
    charactersForSavefile(): any[][];
    facesForSavefile(): any[][];
    partyAbility(abilityId: any): boolean;
    hasEncounterHalf(): boolean;
    hasEncounterNone(): boolean;
    hasCancelSurprise(): boolean;
    hasRaisePreemptive(): boolean;
    hasGoldDouble(): boolean;
    hasDropItemDouble(): boolean;
    ratePreemptive(troopAgi: any): number;
    rateSurprise(troopAgi: any): number;
    performVictory(): void;
    performEscape(): void;
    removeBattleStates(): void;
    requestMotionRefresh(): void;
    onEscapeFailure(): void;
}
