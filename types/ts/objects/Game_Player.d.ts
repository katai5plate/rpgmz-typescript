/// <reference path="../../../global.d.ts" />
export default class Game_Player extends Game_Character {
    _vehicleType: string;
    _vehicleGettingOn: boolean;
    _vehicleGettingOff: boolean;
    _dashing: unknown;
    _needsMapReload: boolean;
    _transferring: boolean;
    _newMapId: unknown;
    _newX: unknown;
    _newY: unknown;
    _newDirection: unknown;
    _fadeType: unknown;
    _followers: typeof Game_Followers;
    _encounterCount: number;
    constructor(...args: any[]);
    initialize(): void;
    initMembers(): void;
    clearTransferInfo(): void;
    followers(): typeof import("./Game_Followers").default;
    refresh(): void;
    isStopping(): any;
    reserveTransfer(mapId: any, x: any, y: any, d: any, fadeType: any): void;
    setupForNewGame(): void;
    requestMapReload(): void;
    isTransferring(): boolean;
    newMapId(): unknown;
    fadeType(): unknown;
    performTransfer(): void;
    isMapPassable(x: any, y: any, d: any): any;
    vehicle(): any;
    isInBoat(): boolean;
    isInShip(): boolean;
    isInAirship(): boolean;
    isInVehicle(): boolean;
    isNormal(): boolean;
    //@ts-expect-error
    isDashing(): unknown;
    isDebugThrough(): any;
    isCollided(x: any, y: any): any;
    centerX(): number;
    centerY(): number;
    center(x: any, y: any): any;
    locate(x: any, y: any): void;
    increaseSteps(): void;
    makeEncounterCount(): void;
    makeEncounterTroopId(): any;
    meetsEncounterConditions(encounter: any): any;
    executeEncounter(): boolean;
    startMapEvent(x: any, y: any, triggers: any, normal: any): void;
    moveByInput(): void;
    canMove(): boolean;
    getInputDirection(): any;
    executeMove(direction: any): void;
    //@ts-expect-error
    update(sceneActive: any): void;
    updateDashing(): void;
    isDashButtonPressed(): boolean;
    updateScroll(lastScrolledX: any, lastScrolledY: any): void;
    updateVehicle(): void;
    updateVehicleGetOn(): void;
    updateVehicleGetOff(): void;
    updateNonmoving(wasMoving: any, sceneActive: any): void;
    triggerAction(): boolean;
    triggerButtonAction(): boolean;
    triggerTouchAction(): any;
    triggerTouchActionD1(x1: any, y1: any): any;
    triggerTouchActionD2(x2: any, y2: any): any;
    triggerTouchActionD3(x2: any, y2: any): any;
    updateEncounterCount(): void;
    canEncounter(): boolean;
    encounterProgressValue(): number;
    checkEventTriggerHere(triggers: any): void;
    checkEventTriggerThere(triggers: any): void;
    //@ts-expect-error
    checkEventTriggerTouch(x: any, y: any): void;
    canStartLocalEvents(): boolean;
    getOnOffVehicle(): boolean;
    getOnVehicle(): boolean;
    getOffVehicle(): boolean;
    forceMoveForward(): void;
    isOnDamageFloor(): boolean;
    moveStraight(d: any): void;
    moveDiagonally(horz: any, vert: any): void;
    jump(xPlus: any, yPlus: any): void;
    showFollowers(): void;
    hideFollowers(): void;
    gatherFollowers(): void;
    areFollowersGathering(): any;
    areFollowersGathered(): any;
}
