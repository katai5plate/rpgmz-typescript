/// <reference path="../../../global.d.ts" />
export default class Game_Action {
    _subjectActorId: unknown;
    _subjectEnemyIndex: unknown;
    _forcing: boolean;
    _item: typeof Game_Item;
    _targetIndex: unknown;
    static EFFECT_RECOVER_HP: number;
    static EFFECT_RECOVER_MP: number;
    static EFFECT_GAIN_TP: number;
    static EFFECT_ADD_STATE: number;
    static EFFECT_REMOVE_STATE: number;
    static EFFECT_ADD_BUFF: number;
    static EFFECT_ADD_DEBUFF: number;
    static EFFECT_REMOVE_BUFF: number;
    static EFFECT_REMOVE_DEBUFF: number;
    static EFFECT_SPECIAL: number;
    static EFFECT_GROW: number;
    static EFFECT_LEARN_SKILL: number;
    static EFFECT_COMMON_EVENT: number;
    static SPECIAL_EFFECT_ESCAPE: number;
    static HITTYPE_CERTAIN: number;
    static HITTYPE_PHYSICAL: number;
    static HITTYPE_MAGICAL: number;
    constructor(...args: any[]);
    initialize(subject: any, forcing: any): void;
    clear(): void;
    setSubject(subject: any): void;
    subject(): any;
    friendsUnit(): any;
    opponentsUnit(): any;
    setEnemyAction(action: any): void;
    setAttack(): void;
    setGuard(): void;
    setSkill(skillId: any): void;
    setItem(itemId: any): void;
    setItemObject(object: any): void;
    setTarget(targetIndex: any): void;
    item(): any;
    isSkill(): any;
    isItem(): any;
    numRepeats(): number;
    checkItemScope(list: any): any;
    isForOpponent(): any;
    isForFriend(): any;
    isForEveryone(): any;
    isForAliveFriend(): any;
    isForDeadFriend(): any;
    isForUser(): any;
    isForOne(): any;
    isForRandom(): any;
    isForAll(): any;
    needsSelection(): any;
    numTargets(): number;
    checkDamageType(list: any): any;
    isHpEffect(): any;
    isMpEffect(): any;
    isDamage(): any;
    isRecover(): any;
    isDrain(): any;
    isHpRecover(): any;
    isMpRecover(): any;
    isCertainHit(): boolean;
    isPhysical(): boolean;
    isMagical(): boolean;
    isAttack(): boolean;
    isGuard(): boolean;
    isMagicSkill(): any;
    decideRandomTarget(): void;
    setConfusion(): void;
    prepare(): void;
    isValid(): any;
    speed(): any;
    makeTargets(): any[];
    repeatTargets(targets: any): any[];
    confusionTarget(): any;
    targetsForEveryone(): any;
    targetsForOpponents(): any;
    targetsForFriends(): any;
    randomTargets(unit: any): any[];
    targetsForDead(unit: any): any;
    targetsForAlive(unit: any): any;
    targetsForDeadAndAlive(unit: any): any;
    evaluate(): number;
    itemTargetCandidates(): any;
    evaluateWithTarget(target: any): number;
    testApply(target: any): any;
    testLifeAndDeath(target: any): any;
    hasItemAnyValidEffects(target: any): any;
    testItemEffect(target: any, effect: any): any;
    itemCnt(target: any): any;
    itemMrf(target: any): any;
    itemHit(): number;
    itemEva(target: any): any;
    itemCri(target: any): number;
    apply(target: any): void;
    makeDamageValue(target: any, critical: any): number;
    evalDamageFormula(target: any): number;
    calcElementRate(target: any): any;
    elementsMaxRate(target: any, elements: any): number;
    applyCritical(damage: any): number;
    applyVariance(damage: any, variance: any): any;
    applyGuard(damage: any, target: any): number;
    executeDamage(target: any, value: any): void;
    executeHpDamage(target: any, value: any): void;
    executeMpDamage(target: any, value: any): void;
    gainDrainedHp(value: any): void;
    gainDrainedMp(value: any): void;
    applyItemEffect(target: any, effect: any): void;
    itemEffectRecoverHp(target: any, effect: any): void;
    itemEffectRecoverMp(target: any, effect: any): void;
    itemEffectGainTp(target: any, effect: any): void;
    itemEffectAddState(target: any, effect: any): void;
    itemEffectAddAttackState(target: any, effect: any): void;
    itemEffectAddNormalState(target: any, effect: any): void;
    itemEffectRemoveState(target: any, effect: any): void;
    itemEffectAddBuff(target: any, effect: any): void;
    itemEffectAddDebuff(target: any, effect: any): void;
    itemEffectRemoveBuff(target: any, effect: any): void;
    itemEffectRemoveDebuff(target: any, effect: any): void;
    itemEffectSpecial(target: any, effect: any): void;
    itemEffectGrow(target: any, effect: any): void;
    itemEffectLearnSkill(target: any, effect: any): void;
    itemEffectCommonEvent(): void;
    makeSuccess(target: any): void;
    applyItemUserEffect(): void;
    lukEffectRate(target: any): number;
    applyGlobal(): void;
    updateLastUsed(): void;
    updateLastSubject(): void;
    updateLastTarget(target: any): void;
}
